# ./docker-compose.yml
services:
  cv_db-service:
    env_file:
      - ./.env
    build:
      context: ./sql
    image: cv_db-image:9.0.1-lts # mysql
    container_name: cv_db-container
    ports:
      - "3307:3306"
    volumes:
      - ./sql/schemadump.sql:/docker-entrypoint-initdb.d/dump.sql
      - mysql-data:/var/lib/mysql
      - ./sql/db_datadir/mysql.cnf:/etc/mysql/my.cnf # /etc/mysql/mysql.conf.d/mysqld.cnf
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - cv-network
    restart: always
    command: ["mysqld"]


  cv_api-service:
    env_file:
      - ./.env
    build:
      context: ./api
    image: cv_api-image:3.20.2-alpine # golang
    container_name: cv_api-container
    ports:
      - "8080:8080"
    depends_on:
      cv_db-service:
        condition: service_healthy
    networks:
      - cv-network
    restart: always
    command: ["dockerize", "-wait", "tcp://cv_api-container:3306", "-timeout", "60s", "./main"]

  cv_bff-service:
    env_file:
      - ./.env
    build:
      context: ./bff
    image: cv_bff-image:3.11-slim # python
    container_name: cv_bff-container
    ports:
      - "5000:5000"
    depends_on:
      cv_db-service:
        condition: service_healthy
    networks:
          - cv-network
    restart: always
    command: ["dockerize", "-wait", "tcp://cv_api-container:8080", "-timeout", "60s", "python3", "app.py", "-i", "cv_api_container", "-p", "8080"]


  
networks:
  cv-network:
    name: cv-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1

volumes:
  mysql-data:
    name: cv_db-volume
